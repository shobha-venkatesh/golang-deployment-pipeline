Description: >

    This CloudFormation template will deploy a full CI/CD pipeline for Go
    development. It includes building with AWS CodeBuild, and infrastructure
    deployment via AWS CloudFormation. It will create an AWS CodePipeline for
    orchastrating builds, testing and deployments to beta and production 
    environments. 

Parameters:
    
    ApplicationName: 
        Description: This will be used to name the pipeline and build resources
        Type: String
        AllowedPattern: '[A-Za-z0-9-]+'
        Default: "stack"
    
    S3Bucket:
        Type: String
        Description: "S3 bucket to use for artifacts. Just bucket Name; not URL. IAM user should have access to the bucket."
        Default: awsci-iac

    ArtifactS3Bucket:
        Description: An existing S3 bucket within this AWS account
        Type: String
        Default: awsci-iac

    GitHubOAuthToken: 
        Description: Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens
        Type: String
        Default: "8527bcdd3aa3bd13ee0488919e2eebe9b1cecb52"

    GitHubUser:
        Description: Enter GitHub username of the repository owner
        Type: String
        Default: "shobha-venkatesh"

    GitHubRepository:
        Description: Enter the repository name that should be monitored for changes
        Type: String
        Default: "golang-deployment-pipeline"

    GitHubBranch:
        Description: Enter the GitHub branch to monitored
        Type: String
        Default: master
    S3Key:
        Type: String
        Description: "S3 key within S3Bucket."
        Default: "golang/operations/cicd/createvolume.zip"

    Email:
        Description: The email address to which CodePipeline sends pipeline notifications.
        Type: String
        Default: "shobha.venkatesh@accenture.com"
Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            - 
                Label: 
                    default: Application Configuration
                Parameters:
                    - ApplicationName
                    - ArtifactS3Bucket
            - 
                Label:
                    default: GitHub Configuration
                Parameters:
                    - GitHubOAuthToken
                    - GitHubUser
                    - GitHubRepository
                    - GitHubBranch
            -   
                Label: 
                    default: Email address
                Parameters:
                    - Email

            
        ParameterLabels:
            ApplicationName: 
                default: Application Name
            ArtifactS3Bucket: 
                default: CodePipeline S3 Bucket
            GitHubRepository: 
                default: Repository Name
            GitHubUser: 
                default: Repository Owner
            GitHubBranch: 
                default: Repository Branch
            GitHubOAuthToken: 
                default: OAuth2 Token
            Email:
                default: Email address     

Resources:
    
    CodePipelineSNSTopic:
        Type: AWS::SNS::Topic
        Properties:
            Subscription:
                -  Endpoint: !Ref Email
                   Protocol: email

    createvolume:
        Type: AWS::Lambda::Function
        DependsOn: 
        -  CodePipelineLambdaRole
        -  LambdaCodePipelineExecutionPolicy
        
        Properties:
           Code:
               S3Bucket: !Ref S3Bucket
               S3Key: !Ref S3Key
           Role: !Sub ${LambdaExecutionRole.Arn}
           Description: "create volume executing from pipeline"
           Timeout: 240
           Handler: lambda_function.lambda_handler
           Runtime: python2.7
           MemorySize: 128


    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ApplicationName
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore: 
                Type: S3
                Location: !Ref ArtifactS3Bucket
            Stages:
                - 
                    Name: Source
                    Actions:
                        -
                            Name: GitHub
                            ActionTypeId:
                                Category: Source
                                Owner: ThirdParty
                                Version: 1
                                Provider: GitHub
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                Owner: !Ref GitHubUser
                                Repo: !Ref GitHubRepository
                                Branch: !Ref GitHubBranch
                                OAuthToken: !Ref GitHubOAuthToken
                -
                    Name: Build
                    Actions:
                        -
                            Name: CodeBuild
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId: 
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration: 
                                ProjectName: !Ref CodeBuild
                -
                    Name: LambdaStage
                    Actions:
                        - 
                            Name: MyLambdaFunction
                            RunOrder: 3
                            InputArtifacts:
                                - Name: Built
                            ActionTypeId:
                                Category: Invoke
                                Owner: AWS
                                Version: 1
                                Provider: Lambda
                            Configuration:
                                FunctionName: !Ref createvolume
                                # NotificationArn: !Ref CodePipelineSNSTopic
                                # CustomData: !Sub 'A new change set was created for the LambdaStage . Do you want to implement the changes?'
                                # ActionMode: CREATE_UPDATE
                                # RoleArn: !Sub ${LambdaExecutionRole.Arn}
                                # Capabilities: CAPABILITY_NAMED_IAM
                                # StackName: !Sub ${ApplicationName}-lambda
                                # TemplatePath: Built::cloudformation/infrastructure.yml
                                # TemplateConfiguration: Built::config/production.conf
                                # ParameterOverrides: !Sub |
                                #     {
                                #         "ApplicationName": "${ApplicationName}",
                                #         "EnvironmentName": "production",
                                #         "ArtifactS3Bucket": "${ArtifactS3Bucket}"
                                #     }



                - 
                    Name: Approvals
                    Actions:
                        - 
                            Name: ProductionGate
                            ActionTypeId: 
                                Category: Approval
                                Owner: AWS
                                Version: 1
                                Provider: Manual
                            Configuration:
                                NotificationArn: !Ref CodePipelineSNSTopic
                            RunOrder: 1    
                



                -
                    Name: Production
                    Actions:
                        - 
                            Name: DeployInfrastructure
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CloudFormation
                            Configuration:
                                ActionMode: CREATE_UPDATE
                                RoleArn: !Sub ${CodePipelineCloudFormationRole.Arn}
                                Capabilities: CAPABILITY_NAMED_IAM
                                StackName: !Sub ${ApplicationName}-production
                                TemplatePath: Built::cloudformation/infrastructure.yml
                                TemplateConfiguration: Built::config/production.conf
                                ParameterOverrides: !Sub |
                                    {
                                        "ApplicationName": "${ApplicationName}",
                                        "EnvironmentName": "production",
                                        "ArtifactS3Bucket": "${ArtifactS3Bucket}"
                                    }
                        
    

 

    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        
                        "Effect": "Allow",
                        "Sid": "",
                        "Principal": { 
                            "Service": "lambda.amazonaws.com" 
                        },
                        "Action": "sts:AssumeRole"
                    }]
                }                
                
            Policies:
                - 
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}-lambdarole
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],

                                    "Resource": "*"
                            },
                            
                            {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:AddPermission"
                                    ],
                                    "Resource": "*"
                            },
                            {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*" ,
                                        "ec2:*",
                                        "iam:ListInstanceProfiles",
                                        "iam:ListRoles",
                                        "iam:PassRole",
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStack",
                                        "cloudformation:UpdateStack",
                                        "cloudwatch:GetMetricStatistics",
                                        "lambda:*",
                                        "iam:*"

                                    ],
                                    "Resource": "*"
                            },
                            {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:PutJobSuccessResult",
                                        "codepipeline:PutJobFailureResult"

                                    ],
                                    "Resource": "*"
                            }

                            ]

                        }

    LambdaCodePipelineExecutionPolicy:
        DependsOn: 
        -  CodePipelineLambdaRole
        Type: AWS::IAM::Policy
        Properties: 
            Roles: 
                -   
                   Ref: CodePipelineLambdaRole                             
            PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}-LambdaRolePolicy
            PolicyDocument: !Sub |                    
                {
                    "Version":"2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "logs:*"
                            ],

                            "Resource": "*"
                            },
                            
                    {
                            "Effect": "Allow",
                            "Action": [
                                "codepipeline:PutJobSuccessResult",
                                "codepipeline:PutJobFailureResult"
                            ],
                            "Resource": "*"
                    },
                    {
                            "Action": "lambda:*",
                            "Effect": "Allow",
                            "Resource": "arn:aws:lambda:us-west-2:181079104366:function:createvolume"
                    },
                    {
                            "Action": "s3:*",
                            "Effect": "Allow",
                            "Resource": "*"
                    },
                    {
                            "Action": "iam:*",
                            "Effect": "Allow",
                            "Resource": "*"
                    }


                    ]

                }
    CodePipelineLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument: |
                {   
                    "Version":"2012-10-17",
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "lambda.amazonaws.com" 
                        }
                    },
                    {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "s3.amazonaws.com"
                        }

                    }
                    ]
                }                                  
                        

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ApplicationName
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/golang:1.7.3
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - 
                        Name: ARTIFACT_S3_BUCKET
                        Value: !Sub ${ArtifactS3Bucket}
            Artifacts:
                Name: !Ref ApplicationName
                Type: CODEPIPELINE

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codepipeline.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "iam:PassRole",
                                        "lambda:*",
                                        "sns:*",
                                        "sqs:*",
                                        "ecs:*",
                                        "cloudwatch:*",
                                        "codepipeline:*",
                                        "iam:*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }

    CodePipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "cloudformation.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [ "*" ],
                                    "Resource": "*"
                            }]
                        }

    CodeDeployApplication:
        Type: AWS::CodeDeploy::Application
        Properties:
            ApplicationName: !Sub ${ApplicationName}

    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codedeploy.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms",
                                "iam:*"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "codebuild.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |      
                        {
                            "Statement": [              
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }
    
    EventRule:
        Type: 'AWS::Events::Rule'
        Properties:
            Description: Events Rule CodePipeline
            EventPattern:
                source:
                    - aws.codepipeline
                detail-type:
                    - CodePipeline Pipeline Execution State Change
                detail:
                    state:
                        - SUCCEEDED
                        - FAILED
            State: ENABLED
            Targets:
                - 
                    Arn: !Ref CodePipelineSNSTopic 
                    Id: CodePipelineSNSTopic
                    InputTransformer:
                        InputTemplate: '"The Pipeline <pipeline> has <pipeline-state>. Go to https://console.aws.amazon.com/codepipeline/home?region=us-west-2#/view/<pipeline>" '
                        InputPathsMap:
                            pipeline: "$.detail.pipeline" 
                            pipeline-state: "$.detail.state"    
    
    

Outputs:

    CodePipelineURL:
        Description: The URL for the created pipeline
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}      

    CodeDeployApplication:
        Description: The CodeDeploy application used across all environments
        Value: !Ref CodeDeployApplication
        Export:
            Name: !Sub CodeDeployApplication-${ApplicationName}

    CodeDeployServiceRoleArn:
        Description: The CodeDeploy service role used across all environments
        Value: !GetAtt CodeDeployServiceRole.Arn
        Export:
            Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}


